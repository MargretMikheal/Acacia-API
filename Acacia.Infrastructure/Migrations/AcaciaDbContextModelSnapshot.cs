// <auto-generated />
using System;
using Acacia.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Acacia.Infrastructure.Migrations
{
    [DbContext(typeof(AcaciaDbContext))]
    partial class AcaciaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Acacia.Data.Entities.BottleDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("BottleDesigns", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BottleDesignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalProductType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BottleDesignId");

                    b.HasIndex("OilId");

                    b.HasIndex("ProductSizeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("FinalProducts", (string)null);

                    b.HasDiscriminator<string>("FinalProductType").HasValue("FinalProduct");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Acacia.Data.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.Oil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PriceListId");

                    b.ToTable("Oils", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.OilIngredient", b =>
                {
                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("OilId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("OilIngredients");
                });

            modelBuilder.Entity("Acacia.Data.Entities.OilOccasionScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Casual")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Formal")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("Night")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Sport")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("OilId")
                        .IsUnique();

                    b.ToTable("OilOccasionScores", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.OilSeasonScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fall")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Spring")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("Summer")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("Winter")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("OilId")
                        .IsUnique();

                    b.ToTable("OilSeasonScores", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PriceLists", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.PriceListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductSizeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("PriceListItems", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SizeUnit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SizeValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductSizes", (string)null);
                });

            modelBuilder.Entity("Acacia.Data.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "عطر",
                            NameEn = "Perfume"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مخمريه",
                            NameEn = "Mukhammaria"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "بودي سبلاش",
                            NameEn = "BodySplash"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "شموع",
                            NameEn = "Candle"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "لوشن الجسم",
                            NameEn = "BodyLotion"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مباخر",
                            NameEn = "Incense"
                        });
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProducts.BodyLotionFinalProduct", b =>
                {
                    b.HasBaseType("Acacia.Data.Entities.FinalProduct");

                    b.HasDiscriminator().HasValue("BodyLotion");
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProducts.BodySplashFinalProduct", b =>
                {
                    b.HasBaseType("Acacia.Data.Entities.FinalProduct");

                    b.Property<bool>("HasGlitter")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("BodySplash");
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProducts.CandleFinalProduct", b =>
                {
                    b.HasBaseType("Acacia.Data.Entities.FinalProduct");

                    b.Property<int>("BurnHours")
                        .HasColumnType("int");

                    b.Property<string>("WaxType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Candle");
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProducts.IncenseFinalProduct", b =>
                {
                    b.HasBaseType("Acacia.Data.Entities.FinalProduct");

                    b.Property<string>("IncenseMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Incense");
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProducts.MukhammariaFinalProduct", b =>
                {
                    b.HasBaseType("Acacia.Data.Entities.FinalProduct");

                    b.Property<bool>("IsOilBased")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Mukhammaria");
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProducts.PerfumeFinalProduct", b =>
                {
                    b.HasBaseType("Acacia.Data.Entities.FinalProduct");

                    b.Property<decimal>("AlcoholPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Perfume");
                });

            modelBuilder.Entity("Acacia.Data.Entities.BottleDesign", b =>
                {
                    b.HasOne("Acacia.Data.Entities.ProductType", "ProductType")
                        .WithMany("BottleDesigns")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Acacia.Data.Entities.FinalProduct", b =>
                {
                    b.HasOne("Acacia.Data.Entities.BottleDesign", "BottleDesign")
                        .WithMany("FinalProducts")
                        .HasForeignKey("BottleDesignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.Oil", "Oil")
                        .WithMany("FinalProducts")
                        .HasForeignKey("OilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.ProductSize", "ProductSize")
                        .WithMany("FinalProducts")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.ProductType", "ProductType")
                        .WithMany("FinalProducts")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BottleDesign");

                    b.Navigation("Oil");

                    b.Navigation("ProductSize");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Acacia.Data.Entities.Oil", b =>
                {
                    b.HasOne("Acacia.Data.Entities.Company", "Company")
                        .WithMany("Oils")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.PriceList", "PriceList")
                        .WithMany("Oils")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("Acacia.Data.Entities.OilIngredient", b =>
                {
                    b.HasOne("Acacia.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("OilIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.Oil", "Oil")
                        .WithMany("OilIngredients")
                        .HasForeignKey("OilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Oil");
                });

            modelBuilder.Entity("Acacia.Data.Entities.OilOccasionScore", b =>
                {
                    b.HasOne("Acacia.Data.Entities.Oil", "Oil")
                        .WithOne("OccasionScore")
                        .HasForeignKey("Acacia.Data.Entities.OilOccasionScore", "OilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oil");
                });

            modelBuilder.Entity("Acacia.Data.Entities.OilSeasonScore", b =>
                {
                    b.HasOne("Acacia.Data.Entities.Oil", "Oil")
                        .WithOne("SeasonScore")
                        .HasForeignKey("Acacia.Data.Entities.OilSeasonScore", "OilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oil");
                });

            modelBuilder.Entity("Acacia.Data.Entities.PriceListItem", b =>
                {
                    b.HasOne("Acacia.Data.Entities.PriceList", "PriceList")
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.ProductSize", "ProductSize")
                        .WithMany("PriceListItems")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acacia.Data.Entities.ProductType", "ProductType")
                        .WithMany("PriceListItems")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("ProductSize");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Acacia.Data.Entities.ProductSize", b =>
                {
                    b.HasOne("Acacia.Data.Entities.ProductType", "ProductType")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Acacia.Data.Entities.BottleDesign", b =>
                {
                    b.Navigation("FinalProducts");
                });

            modelBuilder.Entity("Acacia.Data.Entities.Company", b =>
                {
                    b.Navigation("Oils");
                });

            modelBuilder.Entity("Acacia.Data.Entities.Ingredient", b =>
                {
                    b.Navigation("OilIngredients");
                });

            modelBuilder.Entity("Acacia.Data.Entities.Oil", b =>
                {
                    b.Navigation("FinalProducts");

                    b.Navigation("OccasionScore")
                        .IsRequired();

                    b.Navigation("OilIngredients");

                    b.Navigation("SeasonScore")
                        .IsRequired();
                });

            modelBuilder.Entity("Acacia.Data.Entities.PriceList", b =>
                {
                    b.Navigation("Oils");

                    b.Navigation("PriceListItems");
                });

            modelBuilder.Entity("Acacia.Data.Entities.ProductSize", b =>
                {
                    b.Navigation("FinalProducts");

                    b.Navigation("PriceListItems");
                });

            modelBuilder.Entity("Acacia.Data.Entities.ProductType", b =>
                {
                    b.Navigation("BottleDesigns");

                    b.Navigation("FinalProducts");

                    b.Navigation("PriceListItems");

                    b.Navigation("ProductSizes");
                });
#pragma warning restore 612, 618
        }
    }
}
